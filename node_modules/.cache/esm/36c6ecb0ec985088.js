let chalk,shell,fs,ncp,path,promisify,Docker,inquirer,boxen,uniqueNamesGenerator,updateProjectFile,failSpinner,startSpinner,succeedSpinner,verifySystem,consoleError,stopSpinner,displayNpmUpdateMessage,randomString;_ec9‚Äç.x([["initCommand",()=>initCommand],["copyTemplateFilesToProjectDir",()=>copyTemplateFilesToProjectDir],["pullDockerImages",()=>pullDockerImages],["createProject",()=>createProject]]);_ec9‚Äç.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_ec9‚Äç.w("shelljs",[["default",["shell"],function(v){shell=v}]]);_ec9‚Äç.w("fs-extra",[["default",["fs"],function(v){fs=v}]]);_ec9‚Äç.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_ec9‚Äç.w("path",[["default",["path"],function(v){path=v}]]);_ec9‚Äç.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_ec9‚Äç.w("docker-cli-js",[["Docker",["Docker"],function(v){Docker=v}]]);_ec9‚Äç.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_ec9‚Äç.w("boxen",[["default",["boxen"],function(v){boxen=v}]]);_ec9‚Äç.w("unique-names-generator",[["uniqueNamesGenerator",["uniqueNamesGenerator"],function(v){uniqueNamesGenerator=v}]]);_ec9‚Äç.w("../utils",[["updateProjectFile",["updateProjectFile"],function(v){updateProjectFile=v}],["failSpinner",["failSpinner"],function(v){failSpinner=v}],["startSpinner",["startSpinner"],function(v){startSpinner=v}],["succeedSpinner",["succeedSpinner"],function(v){succeedSpinner=v}],["verifySystem",["verifySystem"],function(v){verifySystem=v}],["consoleError",["consoleError"],function(v){consoleError=v}],["stopSpinner",["stopSpinner"],function(v){stopSpinner=v}],["displayNpmUpdateMessage",["displayNpmUpdateMessage"],function(v){displayNpmUpdateMessage=v}],["randomString",["randomString"],function(v){randomString=v}]]);





















const access = promisify(fs.access);
const copy = promisify(ncp);

       async function initCommand(
    { path, imgCommunico, imgCommunicoApi, imgRasa, ci, enableMongoAuth, cloud } = {},
) {

    await displayNpmUpdateMessage();
    try {
        await verifySystem();
        let images = {};
        if (imgCommunico) images = {...images, communico: imgCommunico};
        if (imgCommunicoApi) images = {...images, 'communico-api': imgCommunicoApi};
        if (imgRasa) images = {...images, rasa: imgRasa};

        const currentDirEmpty = fs.readdirSync(process.cwd()).length === 0;
        if (path) return await createProject(path, images, ci, enableMongoAuth, cloud);
        if (!ci && currentDirEmpty) {
            const { current } = await inquirer.prompt({
                type: 'confirm',
                name: 'current',
                message: 'Create a new project in the current directory?',
                default: true,
            });
            if (current) return await createProject(null, images, ci, enableMongoAuth, cloud);
        }

        if (!ci && !currentDirEmpty) {

            const { subDir } = await inquirer.prompt({
                type: 'input',
                name: 'subDir',
                message:
                    'The project will be created in a subdirectory. How do you want to name it?',
                default: uniqueNamesGenerator({ length: 2 }),
            })
            return await createProject(subDir, images, ci, enableMongoAuth, cloud)
        }

        consoleError('Missing path argument to initialize project.')
    } catch (e) {
        consoleError(e)
    }
}

       async function copyTemplateFilesToProjectDir(targetAbsolutePath, images, update, enableMongoAuth = true, cloud,  mongoPassword = randomString()) {
    try {
        const templateDir = path.resolve(__dirname, '..', '..', `project-template${cloud ? '-actions' : ''}`);
        await access(templateDir, fs.constants.R_OK);
        if (update){
            await fs.copy(path.join(templateDir, '.communico', 'communico.yml'), path.join(targetAbsolutePath, '.communico', 'communico.yml'));
            await fs.copy(path.join(templateDir, '.communico', 'docker-compose-template.yml'), path.join(targetAbsolutePath, '.communico', 'docker-compose-template.yml'));
        } else {
            await copy(templateDir, targetAbsolutePath, { clobber: false });
        }
        updateProjectFile({ projectAbsPath: targetAbsolutePath, images, enableMongoAuth, leaveMongoUrl: cloud, mongoPassword });
    } catch (e) {
        consoleError(e);
    }
}

       async function pullDockerImages(images,
    spinner,
    message = `Downloading Docker images... This may take a while, why don\'t you grab a ‚òï and read the ${chalk.cyan('http://communico.io/docs')} üòâ?`,
) {
    const docker = new Docker({});
    startSpinner(spinner, 'Checking Docker images')
    let download = false;
    const timeout = setTimeout(() => {
        startSpinner(spinner, message);
        download = true;
    }, 3000);
    const pullPromises = images.map(i => docker.command(`pull ${i}`));
    try {
        await Promise.all(pullPromises);
        if (download) return succeedSpinner(spinner, 'Docker images ready.');
        return stopSpinner(spinner)
    } catch (e) {
        consoleError(e);
        failSpinner(spinner, 'Could not download Docker images');
    } finally {
        stopSpinner()
        clearTimeout(timeout);
    }
}

       async function createProject(targetDirectory, images, ci = false, enableMongoAuth = false, cloud = false) {
    let projectAbsPath = process.cwd();
    let projectCreatedInAnotherDir = false;
    if (targetDirectory) {
        projectAbsPath = path.join(projectAbsPath, targetDirectory);
        const message = `${chalk.red('ERROR:')} the directory ${chalk.blueBright.bold(targetDirectory)} already exists. Run ${chalk.cyan.bold('communico init')} again and choose another directory.`
        if (fs.existsSync(projectAbsPath)) return _ec9‚Äç.g.console.log(boxen(message))
        fs.mkdirSync(projectAbsPath);
        shell.cd(projectAbsPath);
        projectCreatedInAnotherDir = true;
    }

    try {
        await copyTemplateFilesToProjectDir(projectAbsPath, images, false, enableMongoAuth, cloud);
        let command = 'communico up';
        if (projectCreatedInAnotherDir) {
            command = `cd ${targetDirectory} && ${command}`;
        }
        const message = `${chalk.green.bold('Your project has been created.')}\n\n` +
                        `Run ${chalk.cyan.bold(command)} to start it.`

        _ec9‚Äç.g.console.log(boxen(message, { padding: 1 }) + '\n');
    } catch (e) {
        consoleError(e)
        process.exit(1)
    }
    return true;
}
